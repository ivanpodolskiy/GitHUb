//
//  OperationViewController.swift
//  GitHUb
//
//  Created by user on 13.12.2021.
//

import UIKit

class OperationViewController: UIViewController {
    
    
    var mas: [String] = []
    override func viewDidLoad() {
        super.viewDidLoad()
        //        operationQueueCommonTask()
//        operationQueueConcurrent()
        operationChain()
    }
    
    @IBOutlet weak var textLabel: UILabel!
    
    func operationQueueCommonTask() {
        let queue = OperationQueue()
        
        queue.addOperation {
            print ("–¢—è–∂–µ–ª–æ–≤–µ—Å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            print (Thread.current)
            
            
            OperationQueue.main.addOperation {
                print ("UI thread")
                print (Thread.current)
                
            }
        }
    }
    
    func operationQueueConcurrent() {
        
     
        let queue = OperationQueue()
        queue.maxConcurrentOperationCount = 3
        
        queue.addOperation {
            
            for i in 0..<10 {
                print ("ü§† \(i)")
                print (Thread.current)
            }
        }
        
        queue.addOperation {
            for i in 0..<10{
                print ("ü§° \(i)")
                print (Thread.current)

            }
        }
        
        
        queue.addOperation {
            for i in 0..<10{
                print ("ü§ñ \(i)")
                print (Thread.current)
               
                //                print(mas)
            }
        }
        
        //        OperationQueue.main{
        //            print (mas)
        //            self.textLabel.text = mas.description
        //        }
        
    }
    
    func operationChain() { //Killer feature –ø—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∂–∞–µ–º 10 –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–æ, –∞ –≤—Ç–æ—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–≤—Å–∏—Ç—Ç—å –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏  2 –ø–æ–ª–æ–∂–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤. –¢.–µ –≤—Ç–æ—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π
        
        let queue = OperationQueue.main
        
        //–°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        let operation1 = BlockOperation() {
            for i in 0..<10 {
                print ("ü§† \(i)")
                print (Thread.current)
                self.mas.append("ü§† - " + String(i))
                
        
            }
        }
        
        let operation2 = BlockOperation() { //—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–∏—Ä–∞—Ü–∏—è
            for i in 0..<10 {
                print ("ü§° \(i)")
                print (Thread.current)
                self.mas.append("ü§° - " + String(i))
            }
        }
        let operation3 = BlockOperation() { //—Å–∏—Å—Ç–µ–º–Ω–∞—è –æ–ø–∏—Ä–∞—Ü–∏—è
            for i in 0..<10 {
                print ("ü§ñ \(i)")
                print (Thread.current)
                self.mas.append("ü§ñ - " + String(i))
            }
        }
        
        let finalOperation = BlockOperation(){
            self.textLabel.text = self.mas.description
            self.textLabel.lineBreakMode = .byWordWrapping
            self.textLabel.numberOfLines = 0
            
        }
        //–≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        operation2.addDependency(operation1) //–≤—Ç–æ—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–¥–∞—Ç—å –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è1 –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ...
        operation3.addDependency(operation2)
        finalOperation.addDependency(operation3)
        
        //—Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        let operations = [operation1, operation2, operation3, finalOperation]
        
        //–û–ø–µ—Ä–∞—Ü–∏—è 
        queue.addOperations(operations, waitUntilFinished: false)
        
        
    }
}
